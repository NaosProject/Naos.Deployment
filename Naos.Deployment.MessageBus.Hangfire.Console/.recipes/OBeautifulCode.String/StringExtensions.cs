// --------------------------------------------------------------------------------------------------------------------
// <copyright file="StringExtensions.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.String.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.String.Recipes
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Text;
    using global::System.Text.RegularExpressions;

    using OBeautifulCode.CodeAnalysis.Recipes;

    using static global::System.FormattableString;

    /// <summary>
    /// Adds some convenient extension methods to strings.
    /// </summary>
#if !OBeautifulCodeStringSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.String.Recipes", "See package version number")]
    internal
#else
    public
#endif
    static class StringExtensions
    {
        private static readonly Encoding AsciiEncoding = new ASCIIEncoding();

        private static readonly Encoding UnicodeEncoding = new UnicodeEncoding();

        private static readonly Encoding Utf8Encoding = new UTF8Encoding();

        private static readonly Regex CsvParsingRegex = new Regex("(?:,\"|^\")(\"\"|[\\w\\W]*?)(?=\",|\"$)|(?:,(?!\")|^(?!\"))([^,]*?)(?=$|,)|(\r\n|\n)", RegexOptions.Compiled);

        private static readonly HashSet<char> AlphabeticCharactersHashSet =
            new HashSet<char>(
                new char[0]
                    .Concat(Enumerable.Range(65, 26).Select(Convert.ToChar))
                    .Concat(Enumerable.Range(97, 26).Select(Convert.ToChar)));

        private static readonly HashSet<char> AlphaNumericCharactersHashSet =
            new HashSet<char>(
                new char[0]
                    .Concat(Enumerable.Range(48, 10).Select(Convert.ToChar))
                    .Concat(Enumerable.Range(65, 26).Select(Convert.ToChar))
                    .Concat(Enumerable.Range(97, 26).Select(Convert.ToChar)));

        /// <summary>
        /// Specifies a map of <see cref="DateTimeKind"/> to the preferred format string to use for that kind.
        /// </summary>
        [SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes", Justification = ObcSuppressBecause.CA2104_DoNotDeclareReadOnlyMutableReferenceTypes_TypeIsImmutable)]
        public static readonly IReadOnlyDictionary<DateTimeKind, string> DateTimeKindToPreferredFormatStringMap =
            new Dictionary<DateTimeKind, string>
            {
                // ReSharper disable once StringLiteralTypo
                { DateTimeKind.Utc, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffff'Z'" },

                // ReSharper disable once StringLiteralTypo
                { DateTimeKind.Unspecified, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffff''" },

                // ReSharper disable once StringLiteralTypo
                // note that the K here expands to the offset (e.g. "-05:00")
                { DateTimeKind.Local, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK" },
            };

        /// <summary>
        /// Appends one string to the another (base) if the base string
        /// doesn't already end with the string to append.
        /// </summary>
        /// <param name="value">The base string.</param>
        /// <param name="shouldEndWith">The string to append.</param>
        /// <remarks>
        /// If the string to append is the empty string, this method will always return the base string.
        /// </remarks>
        /// <returns>
        /// The inputted string where the last character is a backslash.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="shouldEndWith"/> is null.</exception>
        public static string AppendMissing(
            this string value,
            string shouldEndWith)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            if (shouldEndWith == null)
            {
                throw new ArgumentNullException(nameof(shouldEndWith));
            }

            if (!value.EndsWith(shouldEndWith, StringComparison.CurrentCulture))
            {
                value = value + shouldEndWith;
            }

            return value;
        }

        /// <summary>
        /// Parses a CSV string and returns the values.
        /// </summary>
        /// <param name="value">The CSV to parse.</param>
        /// <param name="nullValueEncoding">Optional value indicating how nulls are encoded.  Defaulted to null, which results in a list that never contains null.</param>
        /// <returns>
        /// Returns the values contained within a CSV.
        /// If <paramref name="value"/> is null, returns an empty list.
        /// </returns>
        public static IReadOnlyList<string> FromCsv(
            this string value,
            string nullValueEncoding = null)
        {
            var result = new List<string>();

            // we return an empty collection because ToCsv returns null when the input is an empty collection.
            if (value == null)
            {
                return result;
            }

            // the regex doesn't solve for leading comma
            if (value.StartsWith(",", StringComparison.OrdinalIgnoreCase))
            {
                value = "," + value;
            }

            var matches = CsvParsingRegex.Matches(value);
            foreach (Match match in matches)
            {
                var parsedValue = match.Groups.Cast<Group>().Skip(1).Select(_ => _.Value).Aggregate((working, next) => working + next);
                parsedValue = parsedValue.Replace("\"\"", "\"");
                if (parsedValue == nullValueEncoding)
                {
                    parsedValue = null;
                }

                result.Add(parsedValue);
            }

            return result;
        }

        /// <summary>
        /// Determines if a string is alpha numeric.
        /// </summary>
        /// <param name="value">The string to evaluate.</param>
        /// <param name="otherAllowedCharacters">OPTIONAL set of other characters that are allowed.  These characters will be treated as alpha numeric.</param>
        /// <remarks>
        /// An empty string ("") is considered alpha-numeric.
        /// </remarks>
        /// <returns>
        /// Returns true if the string is alpha-numeric, false if not.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        public static bool IsAlphanumeric(
            this string value,
            IReadOnlyCollection<char> otherAllowedCharacters = null)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            var result = value.OnlyContainsCharacters(AlphaNumericCharactersHashSet, otherAllowedCharacters);

            return result;
        }

        /// <summary>
        /// Determines if a string is alphabetic.
        /// </summary>
        /// <param name="value">The string to evaluate.</param>
        /// <param name="otherAllowedCharacters">OPTIONAL set of other characters that are allowed.  These characters will be treated as alphabetic.</param>
        /// <remarks>
        /// An empty string ("") is considered alphabetic.
        /// </remarks>
        /// <returns>
        /// Returns true if the string is alphabetic, false if not.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        public static bool IsAlphabetic(
            this string value,
            IReadOnlyCollection<char> otherAllowedCharacters = null)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            var result = value.OnlyContainsCharacters(AlphabeticCharactersHashSet, otherAllowedCharacters);

            return result;
        }

        /// <summary>
        /// Determines if a string is in the ASCII printable character set.
        /// </summary>
        /// <param name="value">The string to evaluate.</param>
        /// <remarks>
        /// An empty string ("") is considered to be in the printable set.
        /// </remarks>
        /// <returns>
        /// Returns true if all of the characters in the string are printable; otherwise false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        public static bool IsAsciiPrintable(
            this string value)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            var result = value.All(_ => ((int)_ >= 32) && ((int)_ <= 126));

            return result;
        }

        /// <summary>
        /// Performs a fast case-insensitive string replacement.
        /// </summary>
        /// <remarks>
        /// adapted from <a href="http://www.codeproject.com/KB/string/fastestcscaseinsstringrep.aspx"/>
        /// If newValue is null, all occurrences of oldValue are removed.
        /// </remarks>
        /// <param name="value">the string being searched.</param>
        /// <param name="oldValue">string to be replaced.</param>
        /// <param name="newValue">string to replace all occurrences of oldValue.</param>
        /// <returns>
        /// A string where the case-insensitive string replacement has been applied.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="oldValue"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="oldValue"/> is an empty string.</exception>
        public static string ReplaceCaseInsensitive(
            this string value,
            string oldValue,
            string newValue)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            if (oldValue == null)
            {
                throw new ArgumentNullException(nameof(oldValue));
            }

            if (oldValue.Length == 0)
            {
                throw new ArgumentException(Invariant($"'{nameof(oldValue)}' is an empty string"));
            }

            if (newValue == null)
            {
                newValue = string.Empty;
            }

            var count = 0;
            var position0 = 0;
            int position1;
            var upperString = value.ToUpper(CultureInfo.CurrentCulture);
            var upperPattern = oldValue.ToUpper(CultureInfo.CurrentCulture);
            var inc = (value.Length / oldValue.Length) * (newValue.Length - oldValue.Length);
            var chars = new char[value.Length + Math.Max(0, inc)];
            while ((position1 = upperString.IndexOf(upperPattern, position0, StringComparison.CurrentCulture)) != -1)
            {
                for (var i = position0; i < position1; ++i)
                {
                    chars[count++] = value[i];
                }

                foreach (var t in newValue)
                {
                    chars[count++] = t;
                }

                position0 = position1 + oldValue.Length;
            }

            if (position0 == 0)
            {
                return value;
            }

            for (var i = position0; i < value.Length; ++i)
            {
                chars[count++] = value[i];
            }

            var result = new string(chars, 0, count);
            return result;
        }

        /// <summary>
        /// Replaces tokens in a specified string value with the specified replacement values.
        /// </summary>
        /// <remarks>
        /// DO NOT use this method if your replacement values contain tokens themselves.
        /// This method does not process tokens in any guaranteed order.
        /// </remarks>
        /// <param name="value">The string containing tokens to replace.</param>
        /// <param name="tokenToReplacementValueMap">
        /// A map of the case-sensitive tokens to their replacement values.
        /// If a replacement value is null, an empty string will be used.
        /// </param>
        /// <returns>
        /// The result of replacing all tokens in <paramref name="value"/> with their replacement value.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="tokenToReplacementValueMap"/> is null.</exception>
        public static string ReplaceTokens(
            this string value,
            IReadOnlyDictionary<string, string> tokenToReplacementValueMap)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            if (tokenToReplacementValueMap == null)
            {
                throw new ArgumentNullException(nameof(tokenToReplacementValueMap));
            }

            var result = value;

            foreach (var token in tokenToReplacementValueMap.Keys)
            {
                result = result.Replace(token, tokenToReplacementValueMap[token]);
            }

            return result;
        }

        /// <summary>
        /// Splits a string into chunks of a specified length.
        /// </summary>
        /// <param name="value">The string to split.</param>
        /// <param name="lengthPerChunk">The length of each chunk when splitting the specified string.</param>
        /// <returns>
        /// <paramref name="value"/> split into an ordered list of chunks, where each chunk is of length <paramref name="lengthPerChunk"/>.
        /// If the length of <paramref name="value"/> cannot be evenly divided by <paramref name="lengthPerChunk"/>, then the last
        /// chunk will contain less characters.  No characters are truncated.  If <paramref name="value"/> is the empty string
        /// then an empty list is returned.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        /// <exception cref="ArgumentOutOfRangeException"><paramref name="lengthPerChunk"/> is &lt;= 0.</exception>
        public static IReadOnlyList<string> SplitIntoChunksOfLength(
            this string value,
            int lengthPerChunk)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            if (lengthPerChunk <= 0)
            {
                throw new ArgumentOutOfRangeException(Invariant($"'{nameof(lengthPerChunk)}' <= '{0}'"), (Exception)null);
            }

            var result = new List<string>((value.Length / lengthPerChunk) + 1);

            for (int i = 0; i < value.Length; i += lengthPerChunk)
            {
                var chunk = value.Substring(i, Math.Min(lengthPerChunk, value.Length - i));
                result.Add(chunk);
            }

            return result;
        }

        /// <summary>
        /// Converts the specified string to an alpha-numeric string
        /// by removing all non-alpha-numeric characters.
        /// </summary>
        /// <param name="value">The string to convert.</param>
        /// <remarks>
        /// An empty string ("") is considered alpha-numeric.
        /// </remarks>
        /// <returns>
        /// The specified string with all non-alpha-numeric characters removed.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        public static string ToAlphanumeric(
            this string value)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            var result =
                string.Concat(
                    value.Where(
                        _ =>
                            (((int)_ >= 48) && ((int)_ <= 57)) ||
                            (((int)_ >= 65) && ((int)_ <= 90)) ||
                            (((int)_ >= 97) && ((int)_ <= 122))));
            return result;
        }

        /// <summary>
        /// Encodes all characters in a given string to an array of bytes encoded in ASCII.
        /// </summary>
        /// <param name="value">The string to encode.</param>
        /// <returns>byte array representing the string in ASCII.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        public static byte[] ToAsciiBytes(
            this string value)
        {
            var result = value.ToBytes(AsciiEncoding);

            return result;
        }

        /// <summary>
        /// Converts a string to a byte-array with a given encoding.
        /// </summary>
        /// <param name="value">The string to encode.</param>
        /// <param name="encoding">The encoding to use.</param>
        /// <returns>byte array representing the string in a given encoding.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="encoding"/> is null.</exception>
        public static byte[] ToBytes(
            this string value,
            Encoding encoding)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            if (encoding == null)
            {
                throw new ArgumentNullException(nameof(encoding));
            }

            var result = encoding.GetBytes(value);
            return result;
        }

        /// <summary>
        /// Makes a string safe to insert as a value into a
        /// comma separated values (CSV) object such as a file.
        /// </summary>
        /// <remarks>
        /// Here are the rules for making a string CSV safe:
        /// <a href="http://en.wikipedia.org/wiki/Comma-separated_values" />.
        /// </remarks>
        /// <param name="value">The string to make safe.</param>
        /// <returns>
        /// Returns a string that is safe to insert into a CSV object.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        public static string ToCsvSafe(
            this string value)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            if (string.IsNullOrEmpty(value))
            {
                return value;
            }

            var containsCommas = value.Contains(",");
            var containsDoubleQuotes = value.Contains("\"");
            var containsLineBreak = value.Contains(Environment.NewLine);
            containsLineBreak = containsLineBreak || value.Contains("\n");
            var hasLeadingSpace = value.First() == ' ';
            var hasTrailingSpace = value.Last() == ' ';

            if (containsDoubleQuotes)
            {
                value = value.Replace("\"", "\"\"");
            }

            if (containsCommas || containsDoubleQuotes || containsLineBreak || hasLeadingSpace || hasTrailingSpace)
            {
                value = "\"" + value + "\"";
            }

            return value;
        }

        /// <summary>
        /// Converts a string to lower-case and removes all leading and
        /// trailing white-space characters, using <see cref="CultureInfo.InvariantCulture"/>.
        /// </summary>
        /// <param name="value">The string to operate on.</param>
        /// <returns>The string converted to lower-case with all leading and trailing white-space characters removed.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        public static string ToLowerTrimmed(
            this string value)
        {
            var result = value.ToLowerTrimmed(CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Converts a string to lower-case and removes all leading and
        /// trailing white-space characters, using the specified <see cref="CultureInfo"/>.
        /// </summary>
        /// <param name="value">The string to operate on.</param>
        /// <param name="cultureInfo">Provides information about the specific culture.</param>
        /// <returns>The string converted to lower-case with all leading and trailing white-space characters removed.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="cultureInfo"/> is null.</exception>
        public static string ToLowerTrimmed(
            this string value,
            CultureInfo cultureInfo)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            if (cultureInfo == null)
            {
                throw new ArgumentNullException(nameof(cultureInfo));
            }

            var result = value.ToLower(cultureInfo).Trim();

            return result;
        }

        /// <summary>
        /// Converts a string to upper-case and removes all leading and
        /// trailing white-space characters, using <see cref="CultureInfo.InvariantCulture"/>.
        /// </summary>
        /// <param name="value">The string to operate on.</param>
        /// <returns>The string converted to upper-case with all leading and trailing white-space characters removed.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        public static string ToUpperTrimmed(
            this string value)
        {
            var result = value.ToUpperTrimmed(CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Converts a string to upper-case and removes all leading and
        /// trailing white-space characters, using the specified <see cref="CultureInfo"/>.
        /// </summary>
        /// <param name="value">The string to operate on.</param>
        /// <param name="cultureInfo">Provides information about the specific culture.</param>
        /// <returns>The string converted to upper-case with all leading and trailing white-space characters removed.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="cultureInfo"/> is null.</exception>
        public static string ToUpperTrimmed(
            this string value,
            CultureInfo cultureInfo)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            if (cultureInfo == null)
            {
                throw new ArgumentNullException(nameof(cultureInfo));
            }

            var result = value.ToUpper(cultureInfo).Trim();

            return result;
        }

        /// <summary>
        /// Converts the first character of the specified string to lower-case, using <see cref="CultureInfo.InvariantCulture"/>.
        /// </summary>
        /// <param name="value">The string to operate on.</param>
        /// <returns>The string with the first character converted to lower-case.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        public static string ToLowerFirstCharacter(
            this string value)
        {
            var result = value.ToLowerFirstCharacter(CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Converts the first character of the specified string to lower-case, using the specified <see cref="CultureInfo"/>.
        /// </summary>
        /// <param name="value">The string to operate on.</param>
        /// <param name="cultureInfo">Provides information about the specific culture.</param>
        /// <returns>The string with the first character converted to lower-case.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="cultureInfo"/> is null.</exception>
        public static string ToLowerFirstCharacter(
            this string value,
            CultureInfo cultureInfo)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            if (cultureInfo == null)
            {
                throw new ArgumentNullException(nameof(cultureInfo));
            }

            string result;

            if (value.Length == 0)
            {
                result = value;
            }
            else
            {
                result = Char.ToLower(value[0], cultureInfo) + value.Substring(1, value.Length - 1);
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = ObcSuppressBecause.CA1502_AvoidExcessiveComplexity_DisagreeWithAssessment)]
        public static string ToStringInvariantPreferred(
            this object value,
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                if (value is string stringValue)
                {
                    result = stringValue;
                }
                else if (value is sbyte signedByteValue)
                {
                    result = signedByteValue.ToStringInvariantPreferred();
                }
                else if (value is byte byteValue)
                {
                    result = byteValue.ToStringInvariantPreferred();
                }
                else if (value is short shortValue)
                {
                    result = shortValue.ToStringInvariantPreferred();
                }
                else if (value is ushort unsignedShortValue)
                {
                    result = unsignedShortValue.ToStringInvariantPreferred();
                }
                else if (value is int intValue)
                {
                    result = intValue.ToStringInvariantPreferred();
                }
                else if (value is uint unsignedIntValue)
                {
                    result = unsignedIntValue.ToStringInvariantPreferred();
                }
                else if (value is long longValue)
                {
                    result = longValue.ToStringInvariantPreferred();
                }
                else if (value is ulong unsignedLongValue)
                {
                    result = unsignedLongValue.ToStringInvariantPreferred();
                }
                else if (value is float floatValue)
                {
                    result = floatValue.ToStringInvariantPreferred();
                }
                else if (value is double doubleValue)
                {
                    result = doubleValue.ToStringInvariantPreferred();
                }
                else if (value is decimal decimalValue)
                {
                    result = decimalValue.ToStringInvariantPreferred();
                }
                else if (value is bool boolValue)
                {
                    result = boolValue.ToStringInvariantPreferred();
                }
                else if (value is Guid guidValue)
                {
                    result = guidValue.ToStringInvariantPreferred();
                }
                else if (value is DateTime dateTimeValue)
                {
                    result = dateTimeValue.ToStringInvariantPreferred();
                }
                else if (value is Version versionValue)
                {
                    result = versionValue.ToStringInvariantPreferred();
                }
                else
                {
                    result = value.ToString();
                }
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        public static string ToStringInvariantPreferred(
            #pragma warning disable CS3001 // Argument type is not CLS-compliant
            this sbyte value)
            #pragma warning restore CS3001 // Argument type is not CLS-compliant
        {
            var result = value.ToString(CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            #pragma warning disable CS3001 // Argument type is not CLS-compliant
            this sbyte? value,
            #pragma warning restore CS3001 // Argument type is not CLS-compliant
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((sbyte)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        public static string ToStringInvariantPreferred(
            this byte value)
        {
            var result = value.ToString(CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            this byte? value,
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((byte)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        public static string ToStringInvariantPreferred(
            this short value)
        {
            var result = value.ToString(CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            this short? value,
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((short)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        public static string ToStringInvariantPreferred(
            #pragma warning disable CS3001 // Argument type is not CLS-compliant
            this ushort value)
            #pragma warning restore CS3001 // Argument type is not CLS-compliant
        {
            var result = value.ToString(CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            #pragma warning disable CS3001 // Argument type is not CLS-compliant
            this ushort? value,
            #pragma warning restore CS3001 // Argument type is not CLS-compliant
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((ushort)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        public static string ToStringInvariantPreferred(
            this int value)
        {
            var result = value.ToString(CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            this int? value,
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((int)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        public static string ToStringInvariantPreferred(
            #pragma warning disable CS3001 // Argument type is not CLS-compliant
            this uint value)
            #pragma warning restore CS3001 // Argument type is not CLS-compliant
        {
            var result = value.ToString(CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            #pragma warning disable CS3001 // Argument type is not CLS-compliant
            this uint? value,
            #pragma warning restore CS3001 // Argument type is not CLS-compliant
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((uint)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        public static string ToStringInvariantPreferred(
            this long value)
        {
            var result = value.ToString(CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            this long? value,
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((long)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        public static string ToStringInvariantPreferred(
            #pragma warning disable CS3001 // Argument type is not CLS-compliant
            this ulong value)
            #pragma warning restore CS3001 // Argument type is not CLS-compliant
        {
            var result = value.ToString(CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            #pragma warning disable CS3001 // Argument type is not CLS-compliant
            this ulong? value,
            #pragma warning restore CS3001 // Argument type is not CLS-compliant
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((ulong)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        public static string ToStringInvariantPreferred(
            this float value)
        {
            var result = value.ToString("G9", CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            this float? value,
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((float)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        public static string ToStringInvariantPreferred(
            this double value)
        {
            var result = value.ToString("G17", CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            this double? value,
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((double)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        public static string ToStringInvariantPreferred(
            this decimal value)
        {
            var result = value.ToString(CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            this decimal? value,
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((decimal)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        [SuppressMessage("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase", Justification = "Prefer bool as lower case.")]
        public static string ToStringInvariantPreferred(
            this bool value)
        {
            var result = value.ToString(CultureInfo.InvariantCulture).ToLowerInvariant();

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            this bool? value,
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((bool)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        [SuppressMessage("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase", Justification = ObcSuppressBecause.CA1308_NormalizeStringsToUppercase_PreferGuidLowercase)]
        public static string ToStringInvariantPreferred(
            this Guid value)
        {
            var result = value.ToString().ToLowerInvariant();

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            this Guid? value,
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((Guid)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        public static string ToStringInvariantPreferred(
            this DateTime value)
        {
            var formatString = DateTimeKindToPreferredFormatStringMap[value.Kind];

            var result = value.ToString(formatString, CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        public static string ToStringInvariantPreferred(
            this DateTime? value,
            bool throwIfNull = true)
        {
            string result;

            if (value == null)
            {
                if (throwIfNull)
                {
                    throw new ArgumentNullException(nameof(value));
                }
                else
                {
                    result = null;
                }
            }
            else
            {
                result = ((DateTime)value).ToStringInvariantPreferred();
            }

            return result;
        }

        /// <summary>
        /// Gets the preferred string representation of a specified value using the invariant culture.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>
        /// The invariant culture string representation of the specified value.
        /// </returns>
        public static string ToStringInvariantPreferred(
            this Version value)
        {
            if (value == null)
            {
                return null;
            }

            // We have reviewed and like the default implementation.
            var result = value.ToString();

            return result;
        }

        /// <summary>
        /// Converts the first character of the specified string to upper-case, using <see cref="CultureInfo.InvariantCulture"/>.
        /// </summary>
        /// <param name="value">The string to operate on.</param>
        /// <returns>The string with the first character converted to upper-case.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        public static string ToUpperFirstCharacter(
            this string value)
        {
            var result = value.ToUpperFirstCharacter(CultureInfo.InvariantCulture);

            return result;
        }

        /// <summary>
        /// Converts the first character of the specified string to upper-case, using the specified <see cref="CultureInfo"/>.
        /// </summary>
        /// <param name="value">The string to operate on.</param>
        /// <param name="cultureInfo">Provides information about the specific culture.</param>
        /// <returns>The string with the first character converted to upper-case.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="cultureInfo"/> is null.</exception>
        public static string ToUpperFirstCharacter(
            this string value,
            CultureInfo cultureInfo)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            if (cultureInfo == null)
            {
                throw new ArgumentNullException(nameof(cultureInfo));
            }

            string result;

            if (value.Length == 0)
            {
                result = value;
            }
            else
            {
                result = Char.ToUpper(value[0], cultureInfo) + value.Substring(1, value.Length - 1);
            }

            return result;
        }

        /// <summary>
        /// Encodes all characters in a given string to an array of bytes encoded in unicode.
        /// </summary>
        /// <param name="value">The string to encode.</param>
        /// <returns>byte array representing the string in unicode.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        public static byte[] ToUnicodeBytes(
            this string value)
        {
            var result = value.ToBytes(UnicodeEncoding);
            return result;
        }

        /// <summary>
        /// Encodes all characters in a given string to an array of bytes encoded in UTF-8.
        /// </summary>
        /// <param name="value">The string to encode.</param>
        /// <returns>byte array representing the string in UTF-8.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        public static byte[] ToUtf8Bytes(
            this string value)
        {
            var result = value.ToBytes(Utf8Encoding);
            return result;
        }

        /// <summary>
        /// Truncates a string.
        /// </summary>
        /// <param name="value">The value to truncate.</param>
        /// <param name="maxLength">The max length of the string.</param>
        /// <returns>
        /// <paramref name="value"/> if it's length is &lt;= <paramref name="maxLength"/>
        /// otherwise, <paramref name="value"/> truncated to <paramref name="maxLength"/>.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is null.</exception>
        /// <exception cref="ArgumentOutOfRangeException"><paramref name="maxLength"/> is &lt; 0.</exception>
        public static string Truncate(
            this string value,
            int maxLength)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            if (maxLength < 0)
            {
                throw new ArgumentOutOfRangeException(Invariant($"{nameof(maxLength)} is < 0."));
            }

            var result = new string(value.Take(maxLength).ToArray());

            return result;
        }

        private static bool OnlyContainsCharacters(
            this string value,
            HashSet<char> allowedCharactersHashSet,
            IReadOnlyCollection<char> otherAllowedCharacters)
        {
            if (otherAllowedCharacters != null)
            {
                allowedCharactersHashSet = new HashSet<char>(allowedCharactersHashSet);

                foreach (var otherAllowedCharacter in otherAllowedCharacters)
                {
                    allowedCharactersHashSet.Add(otherAllowedCharacter);
                }
            }

            var result = value.All(_ => allowedCharactersHashSet.Contains(_));

            return result;
        }
    }
}
