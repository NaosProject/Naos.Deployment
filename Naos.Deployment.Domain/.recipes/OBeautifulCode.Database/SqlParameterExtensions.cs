// --------------------------------------------------------------------------------------------------------------------
// <copyright file="SqlParameterExtensions.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Database.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Database.Recipes
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Data;
    using global::System.Data.SqlClient;
    using global::System.Linq;

    using OBeautifulCode.String.Recipes;

    using static global::System.FormattableString;

    /// <summary>
    /// Extension methods for dealing with <see cref="SqlParameter"/> objects.
    /// </summary>
    /// <remarks>
    /// Some resources used:
    /// What is the purpose of IsNullable? <a href="https://stackoverflow.com/questions/5821850/what-is-the-purpose-of-system-data-sqlclient-sqlparameter-isnullable" />.
    /// SQL Server data types and ADO.net: <a href="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/sql-server-data-types?view=netframework-4.8" />.
    /// When should SqlDbType and Size be used: <a href="https://stackoverflow.com/questions/4624811/when-should-sqldbtype-and-size-be-used-when-adding-sqlcommand-parameters" />.
    /// Best method to pass parameters to SqlCommand: <a href="https://stackoverflow.com/questions/293311/whats-the-best-method-to-pass-parameters-to-sqlcommand" />.
    /// How to use SqlParameter.Offset: <a href="https://stackoverflow.com/questions/23722719/how-to-use-the-sqlparameter-offset-property-and-ado-net-to-store-a-binary-file-i"/>.
    /// Stored procedure with default parameters: <a href="https://stackoverflow.com/questions/38149156/stored-procedure-with-default-parameters" />.
    /// The size property has an invalid size of 0: <a href="https://stackoverflow.com/questions/3759285/ado-net-the-size-property-has-an-invalid-size-of-0/4719361"/>.
    /// SqlCommand Parameters size confusion: <a href="https://stackoverflow.com/questions/9483319/sqlcommand-parameters-size-confusion" />.
    /// </remarks>
#if !OBeautifulCodeDatabaseSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Database.Recipes", "See package version number")]
    internal
#else
    public
#endif
    static class SqlParameterExtensions
    {
        private static readonly IReadOnlyCollection<SqlDbType> ValidStringSqlDbTypes = new[] { SqlDbType.Char, SqlDbType.NChar, SqlDbType.VarChar, SqlDbType.NVarChar, SqlDbType.Xml };

        private static readonly IReadOnlyCollection<SqlDbType> ValidByteArraySqlDbTypes = new[] { SqlDbType.Binary, SqlDbType.VarBinary, SqlDbType.Image };

        private static readonly IReadOnlyCollection<SqlDbType> ValidDateTimeSqlDbTypes = new[] { SqlDbType.Date, SqlDbType.SmallDateTime, SqlDbType.DateTime, SqlDbType.DateTime2 };

        /// <summary>
        /// Creates an input parameter for the specified <see cref="string"/> value.
        /// </summary>
        /// <remarks>
        /// <see cref="SqlDbType.Text"/> and <see cref="SqlDbType.NText"/> have been deprecated.
        /// <see cref="SqlParameter.Offset"/> doesn't seem to work for strings.  Ran numerous tests with both input and output
        /// parameters, combined with and without using <see cref="SqlParameter.Size"/> and either the framework throws or just returns
        /// the entire string.
        /// Did not dig into <see cref="SqlParameter.CompareInfo"/> and <see cref="SqlParameter.LocaleId"/>, which both seem to applicable
        /// to strings.
        /// </remarks>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="sqlDbType">
        /// OPTIONAL SQL Server data type to convert the parameter value into.  DEFAULT is <see cref="SqlDbType.NVarChar"/>.
        /// Must be one of:
        /// <see cref="SqlDbType.Char"/>
        /// <see cref="SqlDbType.NChar"/>
        /// <see cref="SqlDbType.VarChar"/>
        /// <see cref="SqlDbType.NVarChar"/>
        /// <see cref="SqlDbType.Xml"/>.
        /// </param>
        /// <param name="size">
        /// OPTIONAL maximum size, in bytes or characters (depending on the value of <paramref name="sqlDbType"/>) to transmit to the server.
        /// DEFAULT is null (use the size of <paramref name="value"/>).
        /// If specified, must be &gt;= -1.
        /// If size of <paramref name="value"/> is greater than the specified <paramref name="size"/> then it will be truncated.
        /// For <see cref="SqlDbType.Char"/>, <see cref="SqlDbType.VarChar"/> this parameter specifies the number of bytes.
        /// For <see cref="SqlDbType.NChar"/>, <see cref="SqlDbType.NVarChar"/> this parameter specifies the number of characters.
        /// The count for strings does not include the terminating character.
        /// Setting a size with <see cref="SqlDbType.Xml"/> will throw; truncating XML results in invalid XML.
        /// -1 or 0 are ignored, they do not cause any truncation.
        /// </param>
        /// <param name="coalesceNullToDbNull">
        /// OPTIONAL value indicating whether to coalesce null to <see cref="DBNull.Value"/>.  DEFAULT is true.
        /// The only time when this should be false is if you are calling a stored procedure and want to use the default value
        /// for the parameter defined in the stored procedure, instead of passing a null value.
        /// </param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this string value,
            string name,
            SqlDbType sqlDbType = SqlDbType.NVarChar,
            int? size = null,
            bool coalesceNullToDbNull = true)
        {
            name.ValidateForSqlParameterName();
            sqlDbType.ValidateForSqlDbType(ValidStringSqlDbTypes);
            if ((sqlDbType == SqlDbType.Xml) && (size != null))
            {
                throw new ArgumentException(Invariant($"{nameof(sqlDbType)} is {nameof(SqlDbType.Xml)} and {nameof(size)} is not null.  Truncating XML makes no sense."));
            }

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = sqlDbType,
            };

            if (coalesceNullToDbNull)
            {
                result.Value = value ?? (object)DBNull.Value;
            }
            else
            {
                result.Value = value;
            }

            if (size != null)
            {
                // setting to < -1 will throw
                result.Size = (int)size;
            }

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a <see cref="string"/> value.
        /// </summary>
        /// <remarks>
        /// <see cref="SqlDbType.Text"/> and <see cref="SqlDbType.NText"/> have been deprecated.
        /// <see cref="SqlParameter.Offset"/> doesn't seem to work for strings.  Ran numerous tests with both input and output
        /// parameters, combined with and without using <see cref="SqlParameter.Size"/> and either the framework throws or just returns
        /// the entire string.
        /// Did not dig into <see cref="SqlParameter.LocaleId"/>, which seems to applicable to strings.
        /// Unsure if <see cref="SqlParameter.CompareInfo"/> is applicable for output parameters.
        /// </remarks>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="sqlDbType">
        /// OPTIONAL SQL Server data type to convert the parameter value into.  DEFAULT is <see cref="SqlDbType.NVarChar"/>.
        /// Must be one of:
        /// <see cref="SqlDbType.Char"/>
        /// <see cref="SqlDbType.NChar"/>
        /// <see cref="SqlDbType.VarChar"/>
        /// <see cref="SqlDbType.NVarChar"/>
        /// <see cref="SqlDbType.Xml"/>.
        /// </param>
        /// <param name="size">
        /// OPTIONAL maximum size, in bytes or characters (depending on the value of <paramref name="sqlDbType"/>) to receive from the server.
        /// DEFAULT is -1 (no size constraint; return the entire string).
        /// This parameter is required; if not set in the <see cref="SqlParameter"/> then the default(int) value of 0 will throw.
        /// If size of value on the server is greater than the specified <paramref name="size"/> then it will be truncated.
        /// For <see cref="SqlDbType.Char"/>, <see cref="SqlDbType.VarChar"/> this parameter specifies the number of bytes.
        /// For <see cref="SqlDbType.NChar"/>, <see cref="SqlDbType.NVarChar"/> this parameter specifies the number of characters.
        /// The count for strings does not include the terminating character.
        /// Setting a size for <see cref="SqlDbType.Xml"/> does nothing.
        /// </param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputStringSqlParameter(
            string name,
            SqlDbType sqlDbType = SqlDbType.NVarChar,
            int size = -1)
        {
            name.ValidateForSqlParameterName();
            sqlDbType.ValidateForSqlDbType(ValidStringSqlDbTypes);

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = sqlDbType,
                Size = size,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified <see cref="Array"/> of <see cref="byte"/> value.
        /// </summary>
        /// <remarks>
        /// <see cref="SqlDbType.Image"/> has been deprecated.
        /// </remarks>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="sqlDbType">
        /// OPTIONAL SQL Server data type to convert the parameter value into.  DEFAULT is <see cref="SqlDbType.VarBinary"/>.
        /// Must be one of:
        /// <see cref="SqlDbType.Binary"/>
        /// <see cref="SqlDbType.VarBinary"/>.
        /// </param>
        /// <param name="size">
        /// OPTIONAL maximum number of bytes to transmit to the server.  DEFAULT is null (use the size of <paramref name="value"/>).
        /// If size of <paramref name="value"/> is greater than the specified <paramref name="size"/> then it will be truncated.
        /// -1 or 0 are ignored, they do not cause any truncation.
        /// </param>
        /// <param name="offset">
        /// OPTIONAL index in the byte array to start transmitting at.  DEFAULT is null (transmit starting at the first byte).
        /// If specified, then must be &gt;= 0 and &lt; the length of <paramref name="value"/>.
        /// If specified, then <paramref name="size"/> must be &gt; 0 and &lt;= the length of <paramref name="value"/> - this offset.
        /// </param>
        /// <param name="coalesceNullToDbNull">
        /// OPTIONAL value indicating whether to coalesce null to <see cref="DBNull.Value"/>.  DEFAULT is true.
        /// The only time when this should be false is if you are calling a stored procedure and want to use the default value
        /// for the parameter defined in the stored procedure, instead of passing a null value.
        /// </param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this byte[] value,
            string name,
            SqlDbType sqlDbType = SqlDbType.VarBinary,
            int? size = null,
            int? offset = null,
            bool coalesceNullToDbNull = true)
        {
            name.ValidateForSqlParameterName();
            sqlDbType.ValidateForSqlDbType(ValidByteArraySqlDbTypes);

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = sqlDbType,
            };

            if (coalesceNullToDbNull)
            {
                result.Value = value ?? (object)DBNull.Value;
            }
            else
            {
                result.Value = value;
            }

            if (size != null)
            {
                // setting to < -1 will throw
                result.Size = (int)size;
            }

            if (offset != null)
            {
                // setting to < 0 will throw
                result.Offset = (int)offset;
            }

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch an <see cref="Array"/> of <see cref="byte"/> value.
        /// </summary>
        /// <remarks>
        /// <see cref="SqlDbType.Image"/> has been deprecated.
        /// Oddly, <see cref="SqlParameter.Offset"/> is ignored for output parameters.  Use other means to chunk/stream binary data.
        /// </remarks>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="sqlDbType">
        /// OPTIONAL SQL Server data type to convert the parameter value into.  DEFAULT is <see cref="SqlDbType.VarBinary"/>.
        /// Must be one of:
        /// <see cref="SqlDbType.Binary"/>
        /// <see cref="SqlDbType.VarBinary"/>.
        /// </param>
        /// <param name="size">
        /// OPTIONAL.
        /// For <see cref="SqlDbType.Binary"/>, the number of bytes to receive from the server, padding with 0's if the payload size is less than the specified size.
        /// For <see cref="SqlDbType.VarBinary"/>, the maximum number of bytes to receive from the server.
        /// DEFAULT is -1 (no constraint; return all of the bytes).
        /// This parameter is required; if not set in the <see cref="SqlParameter"/> then the default(int) value of 0 will throw.
        /// If size of the value on the server is greater than the specified <paramref name="size"/> then it will be truncated.
        /// </param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputByteArraySqlParameter(
            string name,
            SqlDbType sqlDbType = SqlDbType.VarBinary,
            int size = -1)
        {
            name.ValidateForSqlParameterName();
            sqlDbType.ValidateForSqlDbType(ValidByteArraySqlDbTypes);

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = sqlDbType,
                Size = size,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified <see cref="byte"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this byte value,
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.TinyInt,
                Value = value,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified nullable <see cref="byte"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="coalesceNullToDbNull">
        /// OPTIONAL value indicating whether to coalesce null to <see cref="DBNull.Value"/>.  DEFAULT is true.
        /// The only time when this should be false is if you are calling a stored procedure and want to use the default value
        /// for the parameter defined in the stored procedure, instead of passing a null value.
        /// </param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this byte? value,
            string name,
            bool coalesceNullToDbNull = true)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.TinyInt,
            };

            if (coalesceNullToDbNull)
            {
                result.Value = value ?? (object)DBNull.Value;
            }
            else
            {
                result.Value = value;
            }

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a <see cref="byte"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputByteSqlParameter(
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.TinyInt,
            };

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a nullable <see cref="byte"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputNullableByteSqlParameter(
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.TinyInt,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified <see cref="short"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this short value,
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.SmallInt,
                Value = value,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified nullable <see cref="short"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="coalesceNullToDbNull">
        /// OPTIONAL value indicating whether to coalesce null to <see cref="DBNull.Value"/>.  DEFAULT is true.
        /// The only time when this should be false is if you are calling a stored procedure and want to use the default value
        /// for the parameter defined in the stored procedure, instead of passing a null value.
        /// </param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this short? value,
            string name,
            bool coalesceNullToDbNull = true)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.SmallInt,
            };

            if (coalesceNullToDbNull)
            {
                result.Value = value ?? (object)DBNull.Value;
            }
            else
            {
                result.Value = value;
            }

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a <see cref="short"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputShortSqlParameter(
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.SmallInt,
            };

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a nullable <see cref="short"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputNullableShortSqlParameter(
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.SmallInt,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified <see cref="int"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this int value,
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.Int,
                Value = value,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified nullable <see cref="int"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="coalesceNullToDbNull">
        /// OPTIONAL value indicating whether to coalesce null to <see cref="DBNull.Value"/>.  DEFAULT is true.
        /// The only time when this should be false is if you are calling a stored procedure and want to use the default value
        /// for the parameter defined in the stored procedure, instead of passing a null value.
        /// </param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this int? value,
            string name,
            bool coalesceNullToDbNull = true)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.Int,
            };

            if (coalesceNullToDbNull)
            {
                result.Value = value ?? (object)DBNull.Value;
            }
            else
            {
                result.Value = value;
            }

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a <see cref="int"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputIntSqlParameter(
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.Int,
            };

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a nullable <see cref="int"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputNullableIntSqlParameter(
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.Int,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified <see cref="long"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this long value,
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.BigInt,
                Value = value,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified nullable <see cref="long"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="coalesceNullToDbNull">
        /// OPTIONAL value indicating whether to coalesce null to <see cref="DBNull.Value"/>.  DEFAULT is true.
        /// The only time when this should be false is if you are calling a stored procedure and want to use the default value
        /// for the parameter defined in the stored procedure, instead of passing a null value.
        /// </param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this long? value,
            string name,
            bool coalesceNullToDbNull = true)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.BigInt,
            };

            if (coalesceNullToDbNull)
            {
                result.Value = value ?? (object)DBNull.Value;
            }
            else
            {
                result.Value = value;
            }

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a <see cref="int"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputLongSqlParameter(
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.BigInt,
            };

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a nullable <see cref="int"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputNullableLongSqlParameter(
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.BigInt,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified <see cref="bool"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this bool value,
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.Bit,
                Value = value,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified nullable <see cref="bool"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="coalesceNullToDbNull">
        /// OPTIONAL value indicating whether to coalesce null to <see cref="DBNull.Value"/>.  DEFAULT is true.
        /// The only time when this should be false is if you are calling a stored procedure and want to use the default value
        /// for the parameter defined in the stored procedure, instead of passing a null value.
        /// </param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this bool? value,
            string name,
            bool coalesceNullToDbNull = true)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.Bit,
            };

            if (coalesceNullToDbNull)
            {
                result.Value = value ?? (object)DBNull.Value;
            }
            else
            {
                result.Value = value;
            }

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a <see cref="bool"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputBoolSqlParameter(
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.Bit,
            };

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a nullable <see cref="bool"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputNullableBoolSqlParameter(
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.Bit,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified <see cref="Guid"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this Guid value,
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.UniqueIdentifier,
                Value = value,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified nullable <see cref="Guid"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="coalesceNullToDbNull">
        /// OPTIONAL value indicating whether to coalesce null to <see cref="DBNull.Value"/>.  DEFAULT is true.
        /// The only time when this should be false is if you are calling a stored procedure and want to use the default value
        /// for the parameter defined in the stored procedure, instead of passing a null value.
        /// </param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this Guid? value,
            string name,
            bool coalesceNullToDbNull = true)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.UniqueIdentifier,
            };

            if (coalesceNullToDbNull)
            {
                result.Value = value ?? (object)DBNull.Value;
            }
            else
            {
                result.Value = value;
            }

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a <see cref="Guid"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputGuidSqlParameter(
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.UniqueIdentifier,
            };

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a nullable <see cref="Guid"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputNullableGuidSqlParameter(
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.UniqueIdentifier,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified <see cref="decimal"/> value.
        /// </summary>
        /// <remarks>
        /// It's bad practice to use <see cref="SqlDbType.Money"/> and <see cref="SqlDbType.SmallMoney"/> so we are not supporting these types.
        /// In practice, <see cref="SqlParameter.Precision"/> and <see cref="SqlParameter.Scale"/> can be used to coerce data
        /// passed to the database, however the documentation for these properties states
        /// "Use of this property to coerce data passed to the database is not supported. To round, truncate, or otherwise
        /// coerce data before passing it to the database, use the Math class..."
        /// For this reason, we don't expose these as parameters.
        /// </remarks>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this decimal value,
            string name)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.Decimal,
                Value = value,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified nullable <see cref="decimal"/> value.
        /// </summary>
        /// <remarks>
        /// It's bad practice to use <see cref="SqlDbType.Money"/> and <see cref="SqlDbType.SmallMoney"/> so we are not supporting these types.
        /// In practice, <see cref="SqlParameter.Precision"/> and <see cref="SqlParameter.Scale"/> can be used to coerce data
        /// passed to the database, however the documentation for these properties states
        /// "Use of this property to coerce data passed to the database is not supported. To round, truncate, or otherwise
        /// coerce data before passing it to the database, use the Math class..."
        /// For this reason, we don't expose these as parameters.
        /// </remarks>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="coalesceNullToDbNull">
        /// OPTIONAL value indicating whether to coalesce null to <see cref="DBNull.Value"/>.  DEFAULT is true.
        /// The only time when this should be false is if you are calling a stored procedure and want to use the default value
        /// for the parameter defined in the stored procedure, instead of passing a null value.
        /// </param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this decimal? value,
            string name,
            bool coalesceNullToDbNull = true)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = SqlDbType.Decimal,
            };

            if (coalesceNullToDbNull)
            {
                result.Value = value ?? (object)DBNull.Value;
            }
            else
            {
                result.Value = value;
            }

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a <see cref="decimal"/> value.
        /// </summary>
        /// <remarks>
        /// It's bad practice to use <see cref="SqlDbType.Money"/> and <see cref="SqlDbType.SmallMoney"/> so we are not supporting these types.
        /// </remarks>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="precision">
        /// OPTIONAL maximum number of digits used on the server to store the decimal.  DEFAULT is 38.
        /// This parameter is required; if not set in the <see cref="SqlParameter"/> then the default(int) value of 0
        /// will either truncate or throw depending on the data being returned.
        /// </param>
        /// <param name="scale">
        /// OPTIONAL number of significant digits (right of the decimal) used on the server to store the decimal.  DEFAULT is 17.
        /// This parameter is required; if not set in the <see cref="SqlParameter"/> then the default(int) value of 0
        /// will either truncate or throw depending on the data being returned.
        /// </param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputDecimalSqlParameter(
            string name,
            byte precision = 38,
            byte scale = 17)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.Decimal,
                Precision = precision,
                Scale = scale,
            };

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a nullable <see cref="decimal"/> value.
        /// </summary>
        /// <remarks>
        /// It's bad practice to use <see cref="SqlDbType.Money"/> and <see cref="SqlDbType.SmallMoney"/> so we are not supporting these types.
        /// </remarks>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="precision">
        /// OPTIONAL maximum number of digits used on the server to store the decimal.  DEFAULT is 38.
        /// This parameter is required; if not set in the <see cref="SqlParameter"/> then the default(int) value of 0
        /// will either truncate or throw depending on the data being returned.
        /// </param>
        /// <param name="scale">
        /// OPTIONAL number of significant digits (right of the decimal) used on the server to store the decimal.  DEFAULT is 17.
        /// This parameter is required; if not set in the <see cref="SqlParameter"/> then the default(int) value of 0
        /// will either truncate or throw depending on the data being returned.
        /// </param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputNullableDecimalSqlParameter(
            string name,
            byte precision = 38,
            byte scale = 17)
        {
            name.ValidateForSqlParameterName();

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = SqlDbType.Decimal,
                Precision = precision,
                Scale = scale,
            };

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified nullable <see cref="DateTime"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="sqlDbType">
        /// OPTIONAL SQL Server data type to convert the parameter value into.  DEFAULT is <see cref="SqlDbType.DateTime2"/>.
        /// Must be one of:
        /// <see cref="SqlDbType.Date"/>
        /// <see cref="SqlDbType.SmallDateTime"/>
        /// <see cref="SqlDbType.DateTime"/>
        /// <see cref="SqlDbType.DateTime2"/>.
        /// </param>
        /// <param name="scale">
        /// OPTIONAL number of fractional seconds (right of the decimal) to transmit to the server.
        /// DEFAULT is null (transmit the value as-is, do not round or truncate).
        /// This parameter can only be used with <see cref="SqlDbType.DateTime2"/> and, if set, must be &gt;=0 and &lt;=7.
        /// 0 does nothing; the <paramref name="value"/> will be transmitted as-is.  If this parameter is set to a lower
        /// scale than the scale of <paramref name="value"/>, <paramref name="value"/> will be rounded or truncated.
        /// There are no problems using a higher scale than <paramref name="value"/>.
        /// There are also no problems if the server defines the parameter as having a lower or higher scale than
        /// <paramref name="value"/>; it will just be rounded or truncated or expanded to make it work.
        /// </param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this DateTime value,
            string name,
            SqlDbType sqlDbType = SqlDbType.DateTime2,
            byte? scale = null)
        {
            name.ValidateForSqlParameterName();
            sqlDbType.ValidateForSqlDbType(ValidDateTimeSqlDbTypes);
            if ((scale != null) && (sqlDbType != SqlDbType.DateTime2))
            {
                throw new ArgumentException(Invariant($"{nameof(scale)} is {scale} and {nameof(sqlDbType)} {sqlDbType}; scale is only used for {SqlDbType.DateTime2}."));
            }

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = sqlDbType,
                Value = value,
            };

            if (scale != null)
            {
                result.Scale = (byte)scale;
            }

            return result;
        }

        /// <summary>
        /// Creates an input parameter for the specified nullable <see cref="DateTime"/> value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="sqlDbType">
        /// OPTIONAL SQL Server data type to convert the parameter value into.  DEFAULT is <see cref="SqlDbType.DateTime2"/>.
        /// Must be one of:
        /// <see cref="SqlDbType.Date"/>
        /// <see cref="SqlDbType.SmallDateTime"/>
        /// <see cref="SqlDbType.DateTime"/>
        /// <see cref="SqlDbType.DateTime2"/>.
        /// </param>
        /// <param name="scale">
        /// OPTIONAL number of fractional seconds (right of the decimal) to transmit to the server.
        /// DEFAULT is null (transmit the value as-is, do not round or truncate).
        /// This parameter can only be used with <see cref="SqlDbType.DateTime2"/> and, if set, must be &gt;=0 and &lt;=7.
        /// 0 does nothing; the <paramref name="value"/> will be transmitted as-is.  If this parameter is set to a lower
        /// scale than the scale of <paramref name="value"/>, <paramref name="value"/> will be rounded or truncated.
        /// There are no problems using a higher scale than <paramref name="value"/>.
        /// There are also no problems if the server defines the parameter as having a lower or higher scale than
        /// <paramref name="value"/>; it will just be rounded or truncated or expanded to make it work.
        /// </param>
        /// <param name="coalesceNullToDbNull">
        /// OPTIONAL value indicating whether to coalesce null to <see cref="DBNull.Value"/>.  DEFAULT is true.
        /// The only time when this should be false is if you are calling a stored procedure and want to use the default value
        /// for the parameter defined in the stored procedure, instead of passing a null value.
        /// </param>
        /// <returns>
        /// The input parameter.
        /// </returns>
        public static SqlParameter CreateInputSqlParameter(
            this DateTime? value,
            string name,
            SqlDbType sqlDbType = SqlDbType.DateTime2,
            byte? scale = null,
            bool coalesceNullToDbNull = true)
        {
            name.ValidateForSqlParameterName();
            sqlDbType.ValidateForSqlDbType(ValidDateTimeSqlDbTypes);
            if ((scale != null) && (sqlDbType != SqlDbType.DateTime2))
            {
                throw new ArgumentException(Invariant($"{nameof(scale)} is {scale} and {nameof(sqlDbType)} {sqlDbType}; scale is only used for {SqlDbType.DateTime2}."));
            }

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Input,
                ParameterName = name,
                SqlDbType = sqlDbType,
            };

            if (coalesceNullToDbNull)
            {
                result.Value = value ?? (object)DBNull.Value;
            }
            else
            {
                result.Value = value;
            }

            if (scale != null)
            {
                result.Scale = (byte)scale;
            }

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a <see cref="DateTime"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="sqlDbType">
        /// OPTIONAL SQL Server data type to convert the parameter value into.  DEFAULT is <see cref="SqlDbType.DateTime2"/>.
        /// Must be one of:
        /// <see cref="SqlDbType.Date"/>
        /// <see cref="SqlDbType.SmallDateTime"/>
        /// <see cref="SqlDbType.DateTime"/>
        /// <see cref="SqlDbType.DateTime2"/>.
        /// </param>
        /// <param name="scale">
        /// OPTIONAL number of fractional seconds (right of the decimal) to receive from the server.
        /// DEFAULT is null (receive the value as-is, do not round or truncate).
        /// This parameter can only be used with <see cref="SqlDbType.DateTime2"/> and, if set, must be &gt;=0 and &lt;=7.
        /// 0 does nothing; the value at the server will be received as-is.  If this parameter is set to a lower
        /// scale than the scale of the value at the server, it will be rounded or truncated.
        /// There are no problems using a higher scale than the value at the server.
        /// </param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputDateTimeSqlParameter(
            string name,
            SqlDbType sqlDbType = SqlDbType.DateTime2,
            byte? scale = null)
        {
            name.ValidateForSqlParameterName();
            sqlDbType.ValidateForSqlDbType(ValidDateTimeSqlDbTypes);
            if ((scale != null) && (sqlDbType != SqlDbType.DateTime2))
            {
                throw new ArgumentException(Invariant($"{nameof(scale)} is {scale} and {nameof(sqlDbType)} {sqlDbType}; scale is only used for {SqlDbType.DateTime2}."));
            }

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = sqlDbType,
            };

            if (scale != null)
            {
                result.Scale = (byte)scale;
            }

            return result;
        }

        /// <summary>
        /// Creates an output parameter to fetch a nullable <see cref="DateTime"/> value.
        /// </summary>
        /// <param name="name">The name of the parameter.  Must be alpha-numeric, but can start with '@'.</param>
        /// <param name="sqlDbType">
        /// OPTIONAL SQL Server data type to convert the parameter value into.  DEFAULT is <see cref="SqlDbType.DateTime2"/>.
        /// Must be one of:
        /// <see cref="SqlDbType.Date"/>
        /// <see cref="SqlDbType.SmallDateTime"/>
        /// <see cref="SqlDbType.DateTime"/>
        /// <see cref="SqlDbType.DateTime2"/>.
        /// </param>
        /// <param name="scale">
        /// OPTIONAL number of fractional seconds (right of the decimal) to receive from the server.
        /// DEFAULT is null (receive the value as-is, do not round or truncate).
        /// This parameter can only be used with <see cref="SqlDbType.DateTime2"/> and, if set, must be &gt;=0 and &lt;=7.
        /// 0 does nothing; the value at the server will be received as-is.  If this parameter is set to a lower
        /// scale than the scale of the value at the server, it will be rounded or truncated.
        /// There are no problems using a higher scale than the value at the server.
        /// </param>
        /// <returns>
        /// The output parameter.
        /// </returns>
        public static SqlParameter CreateOutputNullableDateTimeSqlParameter(
            string name,
            SqlDbType sqlDbType = SqlDbType.DateTime2,
            byte? scale = null)
        {
            name.ValidateForSqlParameterName();
            sqlDbType.ValidateForSqlDbType(ValidDateTimeSqlDbTypes);
            if ((scale != null) && (sqlDbType != SqlDbType.DateTime2))
            {
                throw new ArgumentException(Invariant($"{nameof(scale)} is {scale} and {nameof(sqlDbType)} {sqlDbType}; scale is only used for {SqlDbType.DateTime2}."));
            }

            var result = new SqlParameter
            {
                Direction = ParameterDirection.Output,
                ParameterName = name,
                SqlDbType = sqlDbType,
            };

            if (scale != null)
            {
                result.Scale = (byte)scale;
            }

            return result;
        }

        private static void ValidateForSqlParameterName(
            this string name)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            if (string.IsNullOrWhiteSpace(name))
            {
                throw new ArgumentException(Invariant($"'{nameof(name)}' is white space"));
            }

            var nameWithoutAtSymbol = name.StartsWith("@", StringComparison.OrdinalIgnoreCase) ? name.Substring(1) : name;

            if (!nameWithoutAtSymbol.IsAlphanumeric())
            {
                throw new ArgumentException("Parameter name is not alphanumeric (ignoring leading '@').");
            }
        }

        private static void ValidateForSqlDbType(
            this SqlDbType sqlDbType,
            IReadOnlyCollection<SqlDbType> validSqlDbTypes)
        {
            if (!validSqlDbTypes.Contains(sqlDbType))
            {
                throw new ArgumentException(Invariant($"'{nameof(validSqlDbTypes)}' does not contain '{sqlDbType}'"));
            }
        }
    }
}